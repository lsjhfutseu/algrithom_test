package com.test;

public class BST<Key extends Comparable<Key>, Value> {
	private Node root;
	
	private class Node{
		Key key;   //键
		Value val; //值
		Node left; //左子节点
		Node right; //右子节点
		
		int N;    //以该节点为根的子树的大小
	}
	
	//put函数
	public void put(Key key, Value val) {
		Node x = root;
		//如果是空表
		if(null == x) {
			root = new Node();
			root.key = key;
			root.val = val;
			root.left = null;
			root.right = null;
			root.N = 1;
		}
		//非空表
		else {
			while(x != null){
				//如果是已插入的键
				if(x.key == key) {
					root.val = val;
				}
			}
		}
	}
	
	public Value get(Key key) {
		return get(root, key);
	}
	
	//以x为根节点的字数中查找键
	private Value get(Node x, Key key) {
		if(x == null) return null;
		if(x.key.equals(key))  return x.val;
		else if(key.compareTo(x.key) > 0) return get(x.right, key);
		else return get(x.left, key);
		
	}
	
	
	public int size() {
		return size(root);
	}
	
	public int size(Node x) {
		if(x == null) return 0;
		return x.N;
	}
}
