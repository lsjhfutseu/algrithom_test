package com.test;

import org.junit.jupiter.api.Test;

public class InsertSort {
	private int []a = {1,5,6,8,9,7,4,5,3,9,74,52,558,65,25,1520,44};
	
	
	/*
	 * —°‘Ò≈≈–Ú
	 * */
	@Test
	public void chooseSort() {
		for(int i = 0; i < a.length; ++i) {
			int min = i;
			for(int j = i + 1; j < a.length; ++j) {
				if(a[j] < a[min]) min = j;
			}
			exchange(i, min);
		}
		for(int i = 0; i < a.length; ++i)
			System.out.println(a[i]);
	}
	
	/*
	 * ≤Â»Î≈≈–Ú
	 * */
	@Test
	public void insertSort() {
		for(int i = 0; i < a.length; ++i){
			for(int j = i; j > 0 && a[j] < a[j - 1]; --j) {
				exchange(j, j-1);
			}
		}
		
		for(int i = 0; i < a.length; ++i)
			System.out.println(a[i]);
	}
	
	/*
	 * œ£∂˚≈≈–Ú
	 * */
	@Test
	public void shellSort() {
		int h = a.length / 2;
		while(h >= 1) {
			for(int i = h; i < a.length; i++) {
				for(int j = i; j > h && a[j] < a[j-h]; j-=h) {
					exchange(j,j-h);
				}
			}
			h /= 2;
		}
		for(int i = 0; i < a.length; ++i)
			System.out.println(a[i]);
	}
	
	public void exchange(int i, int j) {
		if(i == j) return;
		
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
	
	/*
	 * πÈ≤¢≈≈–Ú
	 * */
	@Test
	public void mergeSortTest() {
		mergeSort(0,a.length - 1);
		for(int i = 0; i < a.length; ++i)
			System.out.println(a[i]);
	}
	
	
	
	/*
	 * ◊‘∂•œÚœ¬
	 * */
	public void mergeSort(int low, int high) {
		if(low >=high)
			return;
		int mid = (low + high) / 2;
		mergeSort(low, mid);
		mergeSort(mid+1, high);
		merge(low, high);
	}
	
	public void merge(int low, int high) {
		int mid = (low + high) / 2;
		int []b = new int[a.length];
		for(int i = 0; i < a.length; ++i) {
			b[i] = a[i];
		}
		int i = 0, j = mid+1;
		for(int k = 0; k < a.length; ++k) {
			if(i > mid) a[k] = b[j++];
			else if(j > high) a[k] = b[i++];
			else if(b[i] < b[j]){
				a[k] = b[i];
				i++;
			}
			else {
				a[k] = b[j];
				j++;
			}
		}
	}
	
	/*
	 * ◊‘µ◊œÚ…œ
	 * */
	@Test
	public void mergeSort2() {
		int []b = new int[a.length];
		for(int i = 0; i < a.length; ++i) {
			b[i] = a[i];
		}
		
		int size = 1;
		for(;size <= a.length ; size*=2) {
			for(int i = 0; i < a.length - size; i+= size*2) {
				merge(i, Math.min(i+size*2-1, a.length -1));
			}
		}
		for(int i = 0; i < a.length; ++i)
			System.out.println(a[i]);
	}
	
}
