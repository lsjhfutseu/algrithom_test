package com.test;

public class BST<Key extends Comparable<Key>, Value> {
	private Node root;
	
	private class Node{
		Key key;   //键
		Value val; //值
		Node left; //左子节点
		Node right; //右子节点
		
		int N;    //以该节点为根的子树的大小
	}
	
	//put函数
	public void put(Key key, Value val) {
		
	}
	
	//以x为根节点的树中插入键值对
	private void put(Node x, Key key, Value val) {
		//如果是空表
		if(null == x) {
			x = new Node();
			x.key = key;
			x.val = val;
			x.left = null;
			x.right = null;
			//x.N = 1;
			return;
		}
		//非空表
		while(x != null){
			//如果是已插入的键
			if(x.key.equals(key)) {
				x.val = val;
			}
			else if(x.key.compareTo(key) < 0){
				put(x.right, key, val);
			}
			else {
				put(x.left, key, val);
			}
		}
	}
	
	public Value get(Key key) {
		return get(root, key);
	}
	
	//以x为根节点的字数中查找键
	private Value get(Node x, Key key) {
		if(x == null) return null;
		if(x.key.equals(key))  return x.val;
		else if(key.compareTo(x.key) > 0) return get(x.right, key);
		else return get(x.left, key);
		
	}
	
	
	public int size() {
		return size(root);
	}
	
	public int size(Node x) {
		if(x == null) return 0;
		return x.N;
	}
}
